import os from 'os';
import path from 'path';
import { spawn } from 'child_process';
import { compareReverse } from '@fure/core';
import { Command } from './cli';
import { copyFile, exists, mkdtemp, readdir, rename, rmdir, unlink, writeFile } from './async-fs';

export const findCSCPath = async (): Promise<string> => {
  const winDir = process.env.windir || 'C:\\Windows';
  const dotNetDirs = [`${winDir}\\Microsoft.NET\\Framework`, `${winDir}\\Microsoft.NET\\Framework64`];
  for (const dotNetDir of dotNetDirs) {
    if (!await exists(dotNetDir)) continue;
    const versions = (await readdir(dotNetDir))
      .filter(dir => dir.startsWith('v'))
      .sort(compareReverse());
    for (const version of versions) {
      const cscPath = path.join(dotNetDir, version, 'csc.exe');
      if (!await exists(cscPath)) continue;
      return cscPath;
    }
  }

  const msBuildDir = 'C:\\Program Files (x86)\\MSBuild';
  if (await exists(msBuildDir)) {
    const versions = (await readdir(msBuildDir))
      .filter(dir => dir.match(/\d+.\d+/))
      .sort(compareReverse());
    for (const version of versions) {
      const cscPath = path.join(msBuildDir, version, 'Bin\\csc.exe');
      if (!await exists(cscPath)) continue;
      return cscPath;
    }
  }

  if (process.env.Path) {
    const envPathDirs = process.env.Path.split(';');
    for (const pathDir of envPathDirs) {
      const cscPath = path.join(pathDir, 'csc.exe');
      if (!await exists(cscPath)) continue;
      return cscPath;
    }
  }

  return '';
};

const template = (binFile: string): string => String.raw`/** generated by furegame */
using System;
using System.Diagnostics;
using System.Linq;

class Launcher
{
  private static string BIN_FILE = "${binFile}";
  static void Main(string[] args)
  {
    var startInfo = new ProcessStartInfo();
    startInfo.FileName = AppDomain.CurrentDomain.BaseDirectory + BIN_FILE;
    startInfo.Arguments = String.Join(" ", args.Select(arg => "\"" + arg + "\""));
    startInfo.UseShellExecute = false;
    startInfo.CreateNoWindow = true;
    startInfo.WindowStyle = ProcessWindowStyle.Hidden;
    Process.Start(startInfo);
  }
}
`;

const command: Command = async args => {
  /* eslint-disable no-console */
  if (os.platform() !== 'win32') {
    console.error(`invalid platform, only Windows supported, found: ${os.platform()}`);
    return;
  }

  const exePath = args[1];
  if (!exePath) {
    console.error('missing exe path');
    return;
  }
  const { dir: exeDir, name: exeName, base: exeFile } = path.parse(exePath);
  const binFile = `${exeName}.bin`;
  const binPath = path.join(exeDir, binFile);
  const existsExe = await exists(exePath);
  const existsBin = await exists(binPath);
  if (!existsExe && !existsBin) {
    console.error('exe not exsist');
    return;
  }

  const cscPath = args.csc || await findCSCPath();
  if (!cscPath) {
    console.error('failed to find "csc.exe", try to use "-csc CSC_PATH" to define it manually.');
    return;
  }
  const cscArgs = ['/t:winexe', `/out:${exePath}`];

  const iconPath = args.icon || '';
  if (iconPath) cscArgs.push(`/win32icon:${iconPath}`);

  const tmpDir = await mkdtemp(`${os.tmpdir()}/furegame-build-launch-`);
  const srcPath = path.join(tmpDir, `${exeName}.cs`);
  cscArgs.push(srcPath);

  console.log('[BUILD LAUNCH]:', cscPath, cscArgs);

  const exeBkPath = path.join(tmpDir, exeFile);
  const binBkPath = path.join(tmpDir, binFile);
  existsExe && await copyFile(exePath, exeBkPath);
  existsBin && await copyFile(binPath, binBkPath);
  if (existsExe) {
    existsBin && await unlink(binPath);
    await rename(exePath, binPath);
  }

  await writeFile(srcPath, template(binFile));
  const code = await new Promise(resolve => {
    const child = spawn(cscPath, cscArgs, { stdio: 'inherit' });
    child.once('exit', resolve);
  });

  const clean = async (): Promise<void> => {
    for (const path of [srcPath, exeBkPath, binBkPath]) {
      await exists(path) && await unlink(path);
    }
    await rmdir(tmpDir);
  };

  if (code === 0) {
    await clean();
    return;
  }

  // restore the backup
  await exists(exePath) && await unlink(exePath);
  await exists(binPath) && await unlink(binPath);
  await exists(exeBkPath) && await copyFile(exeBkPath, exePath);
  await exists(binBkPath) && await copyFile(binBkPath, binPath);

  await clean();
  throw new Error('build failed');
};
command.desc = 'BIN_PATH [-icon ICON_PATH] [-csc CSC_PATH] \n\tbuild launch';

export default command;
